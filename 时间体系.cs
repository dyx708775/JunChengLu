using JetBrains.Annotations;
using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
using TMPro;
using UnityEditor;
using UnityEngine;
using UnityEngine.UI;

public class 时间体系
{
    public int 年=1;
    public int 月=1;
    public int 时辰=0;//取值范围0-6
    private Task currentTask;
    private bool isTaskRunning = false;
    #region 单例模式
    public static 时间体系 instance;
    public static 时间体系 Instance
    {
        get
        {
            if (instance == null)
            {
                instance = new 时间体系();
            }
            return instance;
        }
    }
    #endregion
    void 更新背景图()
    {
        GameObject instance1, instance2;
        instance1 = GameObject.Find("宫殿大地图(Clone)/宫殿大地图");
        instance2 = GameObject.Find("宫外大地图(Clone)/宫外大地图");
        int 季 = (月 + 2) / 3;
        int 时间 = 0;
        if (时辰 <= 1) 时间 = 1;
        else if (时辰 <= 3) 时间 = 2;
        else if (时辰 <= 5) 时间 = 3;
        else 时间 = 4;
        int _loc3_ = (季 - 1) * 4 + 时间;
        if (instance1 != null)
        {
            Image 宫殿大地图 = instance1.GetComponent<Image>();
            宫殿大地图.sprite = UI相关.加载本地图片("asgPic_DCWindow/"+_loc3_+".jpg");
        }
        if (instance2 != null)
        {
            Image 宫外大地图 = instance2.GetComponent<Image>();
            宫外大地图.sprite = UI相关.加载本地图片("asgPic_DOWindow/" + _loc3_ + ".jpg");
        }
    }
    public async void 时辰推进()
    {
        if (isTaskRunning)
        {
            await 等待进程完成();
        }
        else
        {
            时间推进();
        }
    }

    private async Task 等待进程完成()
    {
        if (currentTask != null) await currentTask;
        时间推进();
    }

    public void 时间推进()
    {
        时辰++;
        if (时辰 >= 7)
        {
            游戏回合推进();
            时辰 = 0;
            月++;
            if (月 > 12)
            {
                月 = 1;
                年++;
            }
        }
        if (时辰 == 1 && 中间变量.Instance.开科考试 == 1)
        {
            中间变量.Instance.开科考试 = 0;
            常用功能.Instance.科举处理();
            if (中间变量.Instance.祭祀活动 == 1)
            {
                UI相关.小提示("祭祀没办法去了");
                中间变量.Instance.祭祀活动 = 0;
            }
        }
        else if (时辰 == 1 && 中间变量.Instance.祭祀活动 == 1)
        {
            中间变量.Instance.祭祀活动 = 0;
            常用功能.Instance.祭祀活动举行();
        }
        else if (时辰 == 1 && 游戏设定.Instance.事件六 == 1 && 游戏设定.Instance.阿娇 == 1)
        {
            剧情总览.Instance.内忧外患();
        }
        else
        {
            if (时辰 == 0)
            {
                for (int i = 0; i < NPCManager.Instance.大臣列表.Count; i++)
                {
                    int 大臣编号 = NPCManager.Instance.大臣列表[i];
                    大臣 大臣 = (大臣)NPCManager.Instance.所有人物[大臣编号];
                    大臣.策答 = 0;
                    int 随机 = Random.Range(0, 3);
                    int 随机势力增长 = 0;
                    if (随机 == 1)
                    {
                        大臣.清廉 -= Random.Range(0, 3);
                        if (大臣.清廉 < 0) 大臣.清廉 = 0;
                    }
                    else if (随机 == 2)
                    {
                        大臣.清廉 += Random.Range(0, 3);
                        if (大臣.清廉 > 100) 大臣.清廉 = 100;
                    }
                    if (大臣.职务 != "学士" && 大臣.职务 != "")
                    {
                        随机势力增长 = 5;
                    }
                    else if (大臣.职务 == 游戏设定.Instance.崇文馆名称 + "学士")
                    {
                        大臣.任务中 = 5;
                        随机势力增长 = 7;
                    }
                    else if (大臣.特殊标记 == 游戏设定.Instance.崇文馆名称 + "领事")
                    {
                        大臣.任务中 = 5;
                        随机势力增长 = 10;
                    }
                    if (大臣.任务中 == 7)
                    {
                        随机势力增长 = 10;
                    }
                    大臣.功勋 += 随机势力增长;
                    派系管理.朝廷势力增长(大臣.家族, 随机势力增长);
                    if (大臣.功勋 < 0) 大臣.功勋 = 0;
                }
                //皇子禁足计算();
                //妃子和家眷临终记事();
                //计算避孕时间();
                //妃子禁足计算();
                //城市信息更新();
                //买书记事(undefined, undefined, undefined);
                //皇嗣成年礼();
                //外交事件();
                //每月奏折面板();
                //每月后宫数据处理();
                //每月血滴子数据();
                //过渡推进();
                //天干地支月();
                //物价更新();
                //朝代更替();
                //封王更替();
                //子女抓周呀();
                //公主孕期计算();
                //大臣父亲计算();
                //臣妻数据计算();
                //公主婚配更新();
                //大臣妻子诰命计算();
                //大臣妻子国夫人诰命计算();
                //大臣官阶俸禄更新();
                //大臣爵位俸禄更新();
                //宝贝价值();
                //皇孙嫡计算();
                //皇孙封号呀();
                //大臣孕期计算();
                //孩子死亡();
                //太监报告事情(太监报告所有事件);
                if (游戏设定.Instance.国子监丞 != -1 || 游戏设定.Instance.国子监祭酒代行 != -1)
                {
                    //国子监学分计算();
                }
                if (游戏设定.Instance.国子监司业 == 1 || 游戏设定.Instance.国子监祭酒代行 == 1)
                {
                    //国子监属性程序();
                }
                if (主控.Instance.年龄 > 35)//主控体力上限减少
                {
                    if (主控.Instance.体力上限 > 180)
                    {
                        if (主控.Instance.寿命 < 40)
                        {
                            主控.Instance.体力上限 -= 30;
                            if (主控.Instance.体力上限 < 150)
                            {
                                主控.Instance.体力上限 = 150;
                            }
                        }
                        else
                        {
                            主控.Instance.体力上限 -= 10;
                        }
                    }
                }
                if (游戏设定.Instance.祝福 >= 3)
                {
                    string _loc3_ = "陛下，陛下！\n今日黎明时分，永巷上空紫气东来，飞过百余只仙鹤。\n钦天监的大臣称这奇景可是百年不遇的祥瑞之兆，看来陛下要有大喜事了。";
                    //太监报告所有事件.push([_loc3_, "快乐", 5, 26, 0]);
                    游戏设定.Instance.祝福 = 0;
                }
                if (游戏设定.Instance.每月存档开关 == 1)
                {
                    //存档放入("每月存档");
                }
                开始新进程();
            }
            else if (时辰 == 1)
            {
                游戏设定.Instance.教坊收入 = 0;
                for (int i = 0; i < NPCManager.Instance.妃子列表.Count; i++)
                {
                    int 妃子编号 = NPCManager.Instance.妃子列表[i];
                    妃子 妃子 = (妃子)NPCManager.Instance.所有人物[妃子编号];
                    int 随机 = Random.Range(0, 2);
                    if (随机 == 0) 妃子.夫妻恩爱值 += Random.Range(0, 5);
                    else 妃子.夫妻恩爱值 -= Random.Range(0, 5);
                }
                //女大臣记事();
                //大臣娶亲记事();
                //大臣毁亲记事();
                //大臣夫妻记事();
                //大臣家生子记事();
                //大臣家长里短记事();
                //大臣偷情记事();
                //家眷个人记事();
                //家眷社交记事();
                //家眷娶亲记事();
                //家眷毁亲记事();
                //家眷夫妻记事();
                //家眷家生子记事();
                //家眷家长里短记事();
                //家眷偷情记事();
                //生日合集();
                //墨墨写的();
                //法外狂徒();
                //妃嫔记事2();
                //太医记事();
                //大臣御史台相关记事();
                //国子监爱情启蒙();
                //国子监爱情记事();
                //大臣记事三();
                //宫斗剧请随机();
                //计算公主怀孕();
                //计算公主与面首怀孕();
                //大臣世子判断();
                //教坊司青楼记事();
                //大臣父亲计算();
                //大臣儿媳();
                //皇孙嫡计算();
                //皇孙封号呀();
                //臣妻数据计算();
                //公主婚配更新();
                //珠胎暗结剧情();
                //宝贝价值();
                //大臣丁忧计算();
                //过渡推进();
                //每月报告宠妃生辰();
                //太监报告事情(太监报告所有事件);
                if (游戏设定.Instance.少主模式 == 1 && 游戏设定.Instance.太后 != -1)
                {
                    //太后程序啊(太后, 皇帝);
                }
                开始新进程();
            }
            else if (时辰 == 2)
            {
                if (剧情管理.Instance.桂花树下埋麝香 == 1)
                {
                    //桂花树下埋麝香后续();
                }
                if (剧情管理.Instance.清心还魂丹 == 1)
                {
                    //清心还魂丹后续();
                }
                //大臣社交记事();
                //大臣个人的记事();
                //大臣娶亲记事();
                //大臣毁亲记事();
                //大臣夫妻记事();
                //大臣家生子记事();
                //大臣家长里短记事();
                //大臣偷情记事();
                //家眷个人记事();
                //家眷社交记事();
                //家眷娶亲记事();
                //家眷毁亲记事();
                //家眷夫妻记事();
                //家眷家生子记事();
                //家眷家长里短记事();
                //家眷偷情记事();
                //国子监爱情启蒙();
                //国子监爱情记事();
                //后宫多多记事();
                //大臣御史台相关记事();
                //宫斗剧请随机();
                //大臣记事三();
                //太医记事();
                //外国记事();
                //外国记事二();
                //杂说记事();
                //皇子妃记事();
                //过渡推进();
                //皇孙抓周();
                //妃子过渡();
                //妃嫔记事();
                //太后记事();
                //皇孙嫡计算();
                //宝贝价值();
                //藩王记事();
                //外戚系统();
                //大臣儿子入朝为官后续();
                //计算皇子妃怀孕();
                //琴师孕期计算();
                //太监报告午后事件();
                //太监报告事情(太监报告所有事件);
                开始新进程();
            }
            else if (时辰 == 3)
            {
                //妃子个人记事啊();
                //宫女闲逸记事();
                //牙行居养院闲逸记事();
                //其他宫女记事();
                //老鸨交接记事();
                //大臣御史台相关记事();
                //大臣记事三();
                //太医记事();
                //妻妾记事触发条件();
                //邻居记事();
                //过渡推进();
                //随机记事();
                //娃娃亲相关();
                //大臣孩子抓周();
                //皇孙封号呀();
                //宝贝价值();
                //大臣父亲计算();
                //皇孙过渡();
                //曾孙过渡();
                //臣妻数据计算();
                //公主婚配更新();
                //大臣过渡();
                //野生记事();
                //又增加了记事();
                //定制的记事();
                //零散记事();
                //后宫记事();
                //后宫记事逍遥游();
                //皇子个人记事逍遥游();
                //血脉谜团道儒剧情();
                //血脉谜团佛剧情();
                //产后蓐疾();
                //皇子记事();
                //乱伦记事();
                //太监报告剧情事件();
                //太监报告事情(太监报告所有事件);
                开始新进程();
            }
            else if (时辰 == 4)
            {
                //过渡推进();
                //妃嫔记事2();
                //妻妾记事触发条件();
                //公主记事();
                //皇子妃死亡();
                //臣妻死亡();
                //随机寿命计算();
                //太监寿命计算();
                //孩子寿命计算();
                //宝贝价值();
                //嫔妃记事();
                //墨墨宫斗();
                //大臣记事();
                //大臣记事三();
                //太医记事();
                //皇室乱伦记事();
                //通奸记事();
                //妃子皇子偷情();
                //国子监爱情记事();
                //妃子寿命计算();
                //琴师寿命计算();
                //大臣寿命计算();
                //皇孙寿命计算();
                //增加记事();
                //伴读寿命计算();
                //天花之疾();
                //孩子记事();
                //野生妻子生产计算();
                //教坊司生产计算();
                //太监报告事情(太监报告所有事件);
                if (游戏设定.Instance.少主模式 == 1 && 游戏设定.Instance.太后 != -1)
                {
                    //宫人怀孕事件(太后, 皇帝);
                }
                开始新进程();
            }
            else if (时辰 == 5)
            {
                //妃子百合记事();
                //宫女闲逸记事();
                //妻妾记事触发条件();
                //国子监爱情启蒙();
                //国子监爱情记事();
                //后宫多多记事();
                //杂七杂八的记事();
                //很多记事();
                //过渡推进();
                //大臣考察();
                //大臣考察三();
                //大臣御史台相关记事();
                //教坊记事();
                //老师教导皇子程序();
                //女师教导公主程序();
                //太监报告事情(太监报告所有事件);
                开始新进程();
            }
            else if (时辰 == 6)
            {
                //大臣考察二();
                //过渡推进();
                //大臣丁忧计算();
                //外交记事();
                //御史台的记事();
                //公主和离剧情();
                //牢狱记事();
                //皇陵记事();
                //太监报告事情(太监报告所有事件);
                开始新进程();
            }
            else if (时辰 == 7)
            {
                //大臣记事三();
                //过渡推进();
                //杂七杂八的记事();
                //宫女生产();
                //宫殿工期();
                //计算王后怀孕();
                //外国皇后孕期计算();
                //外国皇后生产计算();
                //外命妇生产计算();
                //计算皇后怀孕();
                //计算太孙妃怀孕();
                //大臣妻子怀孕();
                //大臣妻子孕期计算();
                //太孙妃孕期计算();
                //大臣妻子生产计算();
                //宝贝价值();
                //野生妻子怀孕();
                //王后孕期计算();
                //大臣记事四();
                //大臣御史台相关记事();
                //刷新条件();
                //太监报告事情(太监报告所有事件);
                开始新进程();
            }
            else
            {
                //黑色幕布();
                //每月奏折取消();
            }
            #region 太监问声好
            int _loc2_ = Random.Range(0, 30);
            if (主控.Instance.体力 < 40)
            {
                //太监问声好(1);
            }
            else if (主控.Instance.生病刚好 == 1)
            {
                主控.Instance.生病刚好 = 0;
                //太监问声好(2);
            }
            else if (_loc2_ == 0)
            {
                //太监问声好(3);
            }
            else if (Random.Range(0, 3) == 0 && _loc2_ > 3 && _loc2_ <= 6)
            {
                //太监问声好(5);
            }
            else if (Random.Range(0, 3) == 0 && _loc2_ > 0 && _loc2_ <= 3)
            {
                //太监问声好(4);
            }
            else if (Random.Range(0, 3) == 0 && _loc2_ > 6 && _loc2_ <= 9)
            {
                //太监问声好(6);
            }
            else if (Random.Range(0, 5) == 0 && _loc2_ > 9 && _loc2_ < 12)
            {
                //太监问声好(7);
            }
            else if (Random.Range(0, 6) == 0 && _loc2_ >= 12 && _loc2_ < 14)
            {
                //太监问声好(8);
            }
            else if (Random.Range(0, 50) == 0 && _loc2_ >= 14 && _loc2_ < 16)
            {
                //太监问声好(9);
            }
            else if (Random.Range(0, 10) == 0 && _loc2_ >= 16 && _loc2_ < 18)
            {
                //太监问声好(10);
            }
            else if (Random.Range(0, 2) == 0 && _loc2_ >= 18 && _loc2_ < 20)
            {
                //太监问声好(11);
            }
            else if (Random.Range(0, 2) == 0 && _loc2_ >= 20 && _loc2_ < 22)
            {
                //太监问声好(12);
            }
            else if (_loc2_ >= 22 && _loc2_ < 24)
            {
                //太监问声好(13);
            }
            else if (_loc2_ >= 24 && _loc2_ < 26)
            {
                //太监问声好(14);
            }
            else if (_loc2_ >= 26 && _loc2_ < 28)
            {
                //太监问声好(15);
            }
            else if (_loc2_ >= 28 && _loc2_ < 30)
            {
                //太监问声好(16);
            }
            else if (_loc2_ >= 0 && _loc2_ < 30)
            {
                //太监问声好(17);
            }
            else if (年 == 1)
            {
                //太监问声好();
            }
            #endregion
        }
        刷新信息面板();
        更新背景图();
    }

    private async void 开始新进程()
    {
        isTaskRunning = true;
        switch(时辰)
        {
            case 0:
                currentTask = 时辰零事件();
                break;
            case 1:
                currentTask = 时辰一事件();
                break;
            case 2:
                currentTask = 时辰二事件();
                break;
            case 3:
                currentTask = 时辰三事件();
                break;
            case 4:
                currentTask = 时辰四事件();
                break;
            case 5:
                currentTask = 时辰五事件();
                break;
            case 6:
                currentTask = 时辰六事件();
                break;
            case 7:
                currentTask = 时辰七事件();
                break;

        }
        await currentTask;
        isTaskRunning = false;
    }

    private async Task 时辰零事件()
    {
        List<Task> tasks = new List<Task>();
        tasks.Add(记事管理.Instance.大臣社交记事());
        tasks.Add(记事管理.Instance.女大臣记事());
        tasks.Add(记事管理.Instance.大臣个人的记事());
        await Task.WhenAll(tasks.ToArray());
    }

    private async Task 时辰一事件()
    {
        List<Task> tasks = new List<Task>();
        tasks.Add(记事管理.Instance.大臣社交记事());
        tasks.Add(记事管理.Instance.大臣个人的记事());
        await Task.WhenAll(tasks.ToArray());
    }

    private async Task 时辰二事件()
    {
        await Task.Delay(1);
    }

    private async Task 时辰三事件()
    {
        await Task.Delay(1);
    }

    private async Task 时辰四事件()
    {
        await Task.Delay(1);
    }

    private async Task 时辰五事件()
    {
        await Task.Delay(1);
    }

    private async Task 时辰六事件()
    {
        await Task.Delay(1);
    }

    private async Task 时辰七事件()
    {
        await Task.Delay(1);
    }

    public void 刷新信息面板()
    {
        GameObject 信息面板 = GameObject.Find("信息面板(Clone)");
        if(信息面板!=null)
        {
            信息面板UI管理 UI = 信息面板.GetComponent<信息面板UI管理>();
            UI.刷新基本信息面板();
        }
    }
    public void 游戏回合推进()//处理月转折的事件
    {
        中间变量.Instance.挑选侍卫 = 0;
        中间变量.Instance.挑选监生 = 0;
        中间变量.Instance.征召女官 = 0;
        中间变量.Instance.朝廷策答 = 0;
        中间变量.Instance.监生考试 = 0;
        //刷新世界所有的国家数据();
        //每月敌军兵力恢复();
        //每月敌国友好度修正();
        //每月联姻保护期递减();
        //每月敌国主动外交();
        //世子判断();
        //大臣世子判断();
        //妃子孕率更新();
   //     if (国家.龙吟阁 == undefined)
   //     {
   //         国家.龙吟阁 = "龙吟阁";
   //     }
   //     if (国家.群玉院 == undefined)
   //     {
   //         国家.群玉院 = "群玉院";
   //     }
   //     if (国家.存档 == undefined)
   //     {
   //         国家.存档 = 167972337;
   //     }
   //     if (国家.每年存档 == undefined)
   //     {
   //         国家.每年存档 = "每年存档";
   //     }
   //     if (国家.每月存档 == undefined)
   //     {
   //         国家.每月存档 = "每月存档";
   //     }
   //     if (国家.羊肉 == undefined)
   //     {
   //         国家.羊肉 = 0.12;
   //     }
   //     if (国家.羊进价 == undefined)
   //     {
   //         国家.羊进价 = 1.5;
   //     }
   //     if (国家.羊肉量 == undefined)
   //     {
   //         国家.羊肉量 = 50;
   //     }
   //     国家.羊 = 国家.羊肉 * 国家.羊肉量;
   //     if (国家.猪肉 == undefined)
   //     {
   //         国家.猪肉 = 0.08;
   //     }
   //     if (国家.猪进价 == undefined)
   //     {
   //         国家.猪进价 = 2;
   //     }
   //     if (国家.猪肉量 == undefined)
   //     {
   //         国家.猪肉量 = 80;
   //     }
   //     国家.猪 = 国家.猪肉 * 国家.猪肉量;
   //     if (国家.牛肉 == undefined)
   //     {
   //         国家.牛肉 = 0.1;
   //     }
   //     if (国家.牛进价 == undefined)
   //     {
   //         国家.牛进价 = 10;
   //     }
   //     if (国家.牛肉量 == undefined)
   //     {
   //         国家.牛肉量 = 200;
   //     }
   //     国家.牛 = 国家.牛肉 * 国家.牛肉量;
   //     if (国家.教坊收入 == undefined)
   //     {
   //         国家.教坊收入 = 0;
   //     }
   //     if (国家.万寿节 == undefined)
   //     {
   //         国家.万寿节 = "万寿节";
   //     }
   //     if (国家.三月三 !== undefined and 国家.三月三 !== 0)
   //{
   //         国家.三月三 -= 1;
   //     }
        //if (国家.训练周期 > 0)
        //{
        //    国家.训练周期--;
        //    国家.训练 += 2;
        //    if (国家.训练 > 100)
        //    {
        //        国家.训练 = 100;
        //    }
        //}
        //敌人AI程序();
        //每月的官员奏折 = [];
        //每月官员的弹劾奏折();
        //每月丞相奏报 = [];
        //if (游戏设定.Instance.后宫模式 != 1)
        //{
        //    //计算各种造反();
        //}
        //官员辞官事件();
        //每月的军事奏折 = "";
        //if (主角.战报 !== "")
        //{
        //    每月的军事奏折 = 主角.战报;
        //    主角.战报 = "";
        //}
        //i = 0;
        //while (i < 所有敌将.length)
        //{
        //    if (所有敌将[i].被关押 == 1)
        //    {
        //        所有敌将[i].抗拒 -= 2;
        //    }
        //    i++;
        //}
        //k = 0;
        //while (k < _all_army.length)
        //{
        //    _all_army[k].训练度 -= 1;
        //    if (_all_army[k].训练度 < 0)
        //    {
        //        _all_army[k].训练度 = 0;
        //    }
        //    k++;
        //}
        //每个月军工业生产();
        //每个月的各地收支();
        //更新每个月的收益();
        //随机获取三方相性();
        //自动补齐三方相性();
        //刷新每个人的三方势力();
        //成年皇子给自己增加势力();
        //刷新官员品阶();
        //刷新党派();
        //等待的大黑布();
    }
}
